/**
 * jsPDF AutoTable plugin v3.5.25
 * https://github.com/simonbengtsson/jsPDF-AutoTable
 * MIT License (c) 2014-2023 Simon Bengtsson
 */
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["jspdf"], factory);
  } else if (typeof exports !== "undefined") {
    module.exports = factory(require("jspdf"));
  } else {
    global.jspdf = global.jspdf || {};
    global.jspdf.autotable = factory(global.jspdf.jsPDF || global.jsPDF);
  }
})(this, function (jsPDF) {
  "use strict";
  if (!jsPDF) {
    throw new Error("jsPDF is not loaded");
  }

  var globalConfig = {
    defaultStyles: {
      font: "helvetica",
      fontStyle: "normal",
      overflow: "linebreak",
      halign: "left",
      valign: "top",
      fillColor: false,
      textColor: 20,
      fontSize: 10,
      cellPadding: 5,
      lineColor: 200,
      lineWidth: 0
    }
  };

  function extend(target, src) {
    for (var k in src) {
      if (src.hasOwnProperty(k)) {
        target[k] = src[k];
      }
    }
    return target;
  }

  function styles(doc) {
    var drawColor = doc.getDrawColor();
    var fillColor = doc.getFillColor();
    var textColor = doc.getTextColor();
    return {
      drawColor: drawColor,
      fillColor: fillColor,
      textColor: textColor
    };
  }

  function setDefaults(doc) {
    var config = globalConfig.defaultStyles;
    doc.setFont(config.font, config.fontStyle);
    doc.setFontSize(config.fontSize);
    doc.setTextColor(config.textColor);
    if (config.fillColor) doc.setFillColor(config.fillColor);
  }

  function autoTable(doc, options) {
    options = options || {};
    var table = createTable(doc, options);
    table.draw();
    return table;
  }

  function createTable(doc, options) {
    var table = new Table(doc, options);
    table.initialize();
    return table;
  }

  function Table(doc, options) {
    this.doc = doc;
    this.options = options;
    this.styles = extend({}, globalConfig.defaultStyles);
  }

  Table.prototype.initialize = function () {
    this.pageCount = 1;
    this.rows = this.options.body || [];
    this.columns = this.options.head ? this.options.head[0] : [];
    this.startY = this.options.startY || this.doc.autoTable.previous.finalY || 20;
  };
    Table.prototype.draw = function () {
    var doc = this.doc;
    var cursorY = this.startY;
    var cellPadding = this.styles.cellPadding;

    // Draw header
    if (this.columns.length > 0) {
      var header = this.columns;
      var x = doc.internal.pageSize.getWidth() * 0.1;
      var y = cursorY;

      header.forEach(function (col) {
        doc.setFont(undefined, "bold");
        doc.text(String(col), x + cellPadding, y + cellPadding);
        x += 60; // simplistic fixed width
      });

      cursorY += 20;
    }

    // Draw body
    this.rows.forEach(function (row) {
      var x = doc.internal.pageSize.getWidth() * 0.1;
      var y = cursorY;
      row.forEach(function (cell) {
        doc.setFont(undefined, "normal");
        doc.text(String(cell), x + cellPadding, y + cellPadding);
        x += 60;
      });
      cursorY += 18;
      // Add new page if overflow
      if (cursorY > doc.internal.pageSize.getHeight() - 40) {
        doc.addPage();
        cursorY = 20;
      }
    });

    // Save last Y for chaining
    doc.autoTable.previous = { finalY: cursorY };
  };

  // Register on jsPDF prototype
  jsPDF.API.autoTable = function (options) {
    return autoTable(this, options);
  };

  return autoTable;
});


   
